name: "Cross-Platform Builds"

on:
  workflow_dispatch:
    # Manual trigger - go to Actions and run manually
  push:
    branches: [ main, master ]
    # Also trigger on pushes to main/master

jobs:
  build:
    strategy:
      matrix:
        include:
          - platform: macos-latest
            os-name: macos
            go-version: 1.23.0
          - platform: windows-latest
            os-name: windows
            go-version: 1.23.0
          - platform: ubuntu-20.04  # Use older Ubuntu for webkit compatibility
            os-name: linux
            go-version: 1.23.0
    
    runs-on: ${{ matrix.platform }}
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.11.1
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
          
      # Linux-specific dependencies
      - name: Install Linux dependencies
        if: matrix.os-name == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev libsqlcipher-dev
          
      # Get Wails - using same version as project (2.10.1)
      - name: Get Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@v2.10.1
        
      # macOS-specific setup
      - name: macOS - Setup
        if: matrix.os-name == 'macos'
        run: |
          # Install SQLCipher for macOS
          brew install sqlcipher
          # Install appdmg for creating DMG files (optional)
          npm install -g appdmg || true
          
      # Build for each platform
      - name: Build for macOS
        if: matrix.os-name == 'macos'
        run: |
          wails build --platform "darwin/universal" --clean -tags "sqlite_unlock_notify sqlite_crypt sqlcipher" --ldflags="-s -w" -o "Tella-Desktop.app"
          
      - name: Build for Windows
        if: matrix.os-name == 'windows'
        run: |
          wails build --clean -tags "sqlite_unlock_notify sqlite_crypt sqlcipher" --ldflags="-s -w" -o "Tella-Desktop.exe"
          
      - name: Build for Linux
        if: matrix.os-name == 'linux'
        run: |
          export CGO_ENABLED=1
          wails build --clean -tags "sqlite_unlock_notify sqlite_crypt sqlcipher" --ldflags="-s -w" -o "Tella-Desktop"
          
      # Create macOS DMG (optional)
      - name: macOS - Create DMG
        if: matrix.os-name == 'macos'
        run: |
          if command -v appdmg &> /dev/null; then
            echo '{
              "title": "Tella Desktop",
              "background": "./build/appicon.png",
              "contents": [
                { "x": 448, "y": 344, "type": "link", "path": "/Applications" },
                { "x": 192, "y": 344, "type": "file", "path": "./build/bin/Tella-Desktop.app" }
              ]
            }' > dmg-config.json
            appdmg ./dmg-config.json ./build/bin/Tella-Desktop.dmg || echo "DMG creation failed, but continuing..."
          else
            echo "appdmg not available, skipping DMG creation"
          fi
          
      # Upload artifacts
      - name: Upload macOS artifacts
        if: matrix.os-name == 'macos'
        uses: actions/upload-artifact@v4
        with:
          name: Tella-Desktop-macos
          path: |
            build/bin/Tella-Desktop.app
            build/bin/*.dmg
          retention-days: 30
          
      - name: Upload Windows artifacts
        if: matrix.os-name == 'windows'
        uses: actions/upload-artifact@v4
        with:
          name: Tella-Desktop-windows
          path: build/bin/Tella-Desktop.exe
          retention-days: 30
          
      - name: Upload Linux artifacts
        if: matrix.os-name == 'linux'
        uses: actions/upload-artifact@v4
        with:
          name: Tella-Desktop-linux
          path: build/bin/Tella-Desktop
          retention-days: 30